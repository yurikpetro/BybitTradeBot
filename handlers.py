from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ParseMode
from keyboards import *
from loader import dp, bot, States, logging
from services.connection_db import db
from services.trade_help import utils, is_exist_symbol
from services.trade import post_leverage
from config import CHAT_ID_FOR_LOGS, CHAT_ID_FOR_LOGS_THREAD_ID


__version__ = '1.5.1'

history_limit_on_message = positions_limit_on_message = 10  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è (–ª–∏–º–∏—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)

# -----------------------------------------------------------------------
def admin_in_bd(tg_id) -> bool:
    if tg_id in db.get_admins():
        return True
    return False

# ------------------------------------------------------------------------
# –†–ê–ë–û–¢–ê –° –ö–û–ú–ê–ù–î–ê–ú–ò

@dp.message_handler(commands=['start'])
async def start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if '-' in str(message.chat.id):
        logging.warning(f'–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ id={message.chat.id}, username=@{message.chat.username}')
        return

    if admin_in_bd(user_id):
        await state.update_data({
            'history_limit_on_message': history_limit_on_message,
            'positions_limit_on_message': positions_limit_on_message,
            'history_limit_step': history_limit_on_message,  # —à–∞–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–≤–µ–Ω –ª–∏–º–∏—Ç—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–æ —Å—Ç—Ä–∞–Ω–Ω–æ—Å—Ç–µ–π
            'positions_limit_step': positions_limit_on_message,
        })

        await message.reply(text="BybitTradeBot –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!", reply_markup=del_kb)
        await bot.send_message(chat_id=user_id, text="–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /help", reply_markup=inline_user_manager)
    else:
        await message.reply(text="–ü—Ä–∏–≤–µ—Ç! –Ø BybitTradeBot! –Ø –ø–æ–º–æ–≥—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π —Ç—Ä–µ–π–¥–∏–Ω–≥.\n"
                                 "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –±–æ—Ç—Éüò™\n"
                                 "–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –í–∞—à–∏—Ö –Ω—É–∂–¥ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º: @glithhch –∏ @yurikpetro", reply_markup=del_kb)


@dp.message_handler(commands=['help'])
async def start_command(message: Message):
    await message.reply(text=f'''–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - {__version__}
/start - –≤—ã–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞

<b>–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è üü•StopLoss –∏ üü©TakeProfit?</b>
–ó–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–µ –æ—Ç 1 –¥–æ 100
<b>–¢–µ–π–∫–ü—Ä–æ—Ñ–∏—Ç</b> —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã + (–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã * TP/100), 
<b>–°—Ç–æ–ø–õ–æ—Å—Å</b> –∂–µ –∫–∞–∫ –°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã - (–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã * SL/100)

–ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã: 500$, –¢–µ–π–∫–ü—Ä–æ—Ñ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ 20%, –°—Ç–æ–ø–õ–æ—Å—Å –∫–∞–∫ 25%, —Ç–æ–≥–¥–∞:
üü©<b>–¢–µ–π–∫–ü—Ä–æ—Ñ–∏—Ç:</b> 500$ + (500$ * 0,2) = 500$ + 100$ = <b>600$</b>
üü•<b>–°—Ç–æ–ø–õ–æ—Å—Å:</b> 500$ - (500$ * 0.25) = 500$ - 125$ = <b>375$</b>
–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É - https://telegra.ph/Instrukciya-po-polzovaniyu-botom-01-05''', parse_mode=ParseMode.HTML)


@dp.message_handler(text=['–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ üö´'], state='*')
async def cancel_current_state(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=del_kb)
    await state.finish()

# -------------------------------------------------------------------------

@dp.message_handler(state=States.all_states)
async def states_manager(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ """
    current_state = await state.get_state()

    if current_state == "States:change_leverage":
        await change_leverage(message, state)
    elif current_state == "States:change_quantity":
        await change_quantity(message, state)
    elif current_state == "States:change_takeProfit":
        await change_takeProfit(message, state)
    elif current_state == "States:change_stopLoss":
        await change_stopLoss(message, state)


async def change_leverage(message, state):
    msg_id = message.from_user.id
    coin, msg_leverage = message.text.split()
    coin = coin.upper() if "USDT" in coin.upper() else coin.upper() + "USDT"

    try:
        if is_exist_symbol(coin):
            if msg_leverage.isdigit():
                msg_leverage = int(msg_leverage)
                if 1 <= msg_leverage <= 100:
                    if msg_leverage == 10:
                        db.set_leverage_by_symbol(coin)
                    else:
                        db.set_leverage_by_symbol(coin, msg_leverage)

                    post_leverage(coin, msg_leverage)
                    await bot.send_message(msg_id, f'–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è –º–æ–Ω–µ—Ç—ã {coin} —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–æ {msg_leverage}x', reply_markup=del_kb)
                    await bot.send_message(chat_id=CHAT_ID_FOR_LOGS, message_thread_id=CHAT_ID_FOR_LOGS_THREAD_ID, text=f'–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –∏–∑–º–µ–Ω–µ–Ω–æ –∏ —Ç–µ–ø–µ—Ä—å –¥–ª—è –º–æ–Ω–µ—Ç—ã {coin} —Ä–∞–≤–Ω–æ {msg_leverage}x')
                else:
                    await bot.send_message(msg_id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1 - 100', reply_markup=del_kb)
            else:
                await bot.send_message(msg_id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!', reply_markup=del_kb)
        else:
            await message.reply("–¢–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –Ω–∞ ByBit –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=del_kb)
            await bot.send_message(chat_id=CHAT_ID_FOR_LOGS, message_thread_id=CHAT_ID_FOR_LOGS_THREAD_ID, text=f'–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ –¥–ª—è –º–æ–Ω–µ—Ç—ã {coin}, —Ç–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –Ω–∞ ByBit –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    except Exception as e:
        if "ErrCode: 110043" in str(e):
            await bot.send_message(msg_id, f"–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è –º–æ–Ω–µ—Ç—ã {coin} —É–∂–µ —Ä–∞–≤–Ω–æ {msg_leverage}", reply_markup=del_kb)
        else:
            logging.warning(f"–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–µ—á–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")
    await state.finish()



async def change_quantity(message, state):
    msg_id = message.from_user.id
    if str(message.text).isdigit():
        msg_int = int(message.text)
        if 0 <= msg_int:
            db.set_quantity(msg_int)
            await bot.send_message(msg_id, f'–°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {msg_int}$', reply_markup=del_kb)
            await bot.send_message(chat_id=CHAT_ID_FOR_LOGS, message_thread_id=CHAT_ID_FOR_LOGS_THREAD_ID, text=f'–°—É–º–º–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑–º–µ–Ω–µ–Ω–∞, –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–∞ {msg_int}$')
        else:
            await bot.send_message(msg_id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', reply_markup=del_kb)
    else:
        await bot.send_message(msg_id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!', reply_markup=del_kb)
    await state.finish()


async def change_takeProfit(message, state):
    msg_id = message.from_user.id
    if str(message.text).isdigit():
        msg_int = int(message.text)
        if 0 <= msg_int:
            db.set_takeProfit(msg_int)
            await bot.send_message(msg_id, f'üü©TakeProfit —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω {msg_int}, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ TakeProfit –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ {100 + msg_int}% –æ—Ç —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏', reply_markup=del_kb)
            await bot.send_message(chat_id=CHAT_ID_FOR_LOGS, message_thread_id=CHAT_ID_FOR_LOGS_THREAD_ID, text=f'üü©–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ TakeProfit, –æ–Ω–æ —Ä–∞–≤–Ω–æ {100 + msg_int}%')
        else:
            await bot.send_message(msg_id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', reply_markup=del_kb)
    else:
        await bot.send_message(msg_id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!', reply_markup=del_kb)
    await state.finish()


async def change_stopLoss(message, state):
    msg_id = message.from_user.id
    if str(message.text).isdigit():
        msg_int = int(message.text)
        if 0 <= msg_int <= 100:
            db.set_stopLoss(msg_int)
            await bot.send_message(msg_id, f'üü•StopLoss —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω {msg_int}, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ StopLoss –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–∞ {100 - msg_int}% –æ—Ç —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏', reply_markup=del_kb)
            await bot.send_message(chat_id=CHAT_ID_FOR_LOGS, message_thread_id=CHAT_ID_FOR_LOGS_THREAD_ID, text=f'üü•–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ StopLoss, –æ–Ω–æ —Ä–∞–≤–Ω–æ {100 - msg_int}%')

        else:
            await bot.send_message(msg_id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100', reply_markup=del_kb)
    else:
        await bot.send_message(msg_id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!', reply_markup=del_kb)
    await state.finish()
# -------------------------------------------------------------------------

async def update_message(chat_id, text, id_message, reply_markup=None):
    try:
        await bot.edit_message_text(chat_id=chat_id, message_id=id_message, text=text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except Exception as err:
        logging.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ chat_id={chat_id} message_id={id_message}\n{err}')
        await bot.send_message(chat_id=CHAT_ID_FOR_LOGS, message_thread_id=CHAT_ID_FOR_LOGS_THREAD_ID, text=f'update_message | –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ message_id={id_message}')


@dp.callback_query_handler()
async def buttons_manager(call: CallbackQuery, state: FSMContext):
    call_id = call.from_user.id
    call_data = call.data
    full_history = [f'{num}. {part}\n' for num, part in enumerate(db.history, 1)]  # —Ç—É—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    full_positions = [f'{num}. {part}\n' for num, part in enumerate(db.open_positions, 1)]

    state_data = await state.get_data()
    history_limit_step = state_data.get('history_limit_step')
    positions_limit_step = state_data.get('positions_limit_step')

    messages_and_states = {
        'change_quantity': ('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π', States.change_quantity),
        'change_leverage': ('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—ë –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞, –ø—Ä–∏–º–µ—Ä: BTC 50', States.change_leverage),
        'change_stopLoss': ('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è stopLoss –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0 - 100', States.change_stopLoss),
        'change_takeProfit': ('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è takeProfit –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0 - 100', States.change_takeProfit),
    }

    # ------------------------------------------------------------------------------
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ò–°–¢–û–†–ò–ò
    if call_data == 'show_history':
        db.update_history()
        full_history = [f'{num}. {part}\n' for num, part in enumerate(db.history, 1)]

        history_limit_step = history_limit_on_message  # —Å–±—Ä–æ—Å —à–∞–≥–∞
        history = "".join(full_history[:history_limit_on_message])

        msg = await bot.send_message(call_id, text=f"üóÇ<b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤:</b>\n\n{history}",
                                     reply_markup=inline_next if history_limit_step <= len(full_history) else None,
                                     parse_mode=ParseMode.HTML)
        await state.update_data(id_history_message=msg.message_id)
        await bot.answer_callback_query(call.id)

    elif call_data == 'next_history':
        if len(full_history) >= history_limit_step + history_limit_on_message or len(full_history) - history_limit_step > 0:
            history_limit_step += history_limit_on_message
            await state.update_data(history_limit_step=history_limit_step)
        else:
            await bot.answer_callback_query(call.id)
            return

        history = "".join(full_history[history_limit_step-history_limit_on_message:history_limit_step])

        await update_message(call_id, text=f"üóÇ<b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤:</b>\n\n{history}", id_message=state_data.get('id_history_message'),
                             reply_markup=inline_back if history_limit_step >= len(full_history) else inline_next_back)
        await bot.answer_callback_query(call.id)

    elif call_data == 'back_history':
        if history_limit_step - history_limit_on_message >= history_limit_on_message:
            history_limit_step -= history_limit_on_message
            await state.update_data(history_limit_step=history_limit_step)
        else:
            await bot.answer_callback_query(call.id)
            return

        history = "".join(full_history[history_limit_step-history_limit_on_message:history_limit_step])

        await update_message(call_id, text=f"üóÇ<b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤:</b>\n\n{history}", id_message=state_data.get('id_history_message'),
                             reply_markup=inline_next if history_limit_step <= history_limit_on_message else inline_next_back, )
        await bot.answer_callback_query(call.id)

    # ------------------------------------------------------------------------------
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ü–û–ó–ò–¶–ò–ô
    elif call_data == 'show_positions':
        db.update_open_positions()
        full_positions = [f'{num}. {part}\n' for num, part in enumerate(db.open_positions, 1)]

        positions_limit_step = positions_limit_on_message  # —Å–±—Ä–æ—Å —à–∞–≥–∞
        positions = "".join(full_positions[:positions_limit_on_message])

        msg = await bot.send_message(call_id, text=f"üìñ<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n{positions}", reply_markup=inline_next_positions if positions_limit_step <= len(full_positions) else None, parse_mode=ParseMode.HTML)

        await state.update_data(id_positions_message=msg.message_id)
        await bot.answer_callback_query(call.id)

    elif call_data == 'next_positions':
        if len(full_positions) >= positions_limit_step + positions_limit_on_message or len(full_positions) - positions_limit_step > 0:
            positions_limit_step += positions_limit_on_message
            await state.update_data(positions_limit_step=positions_limit_step)
        else:
            await bot.answer_callback_query(call.id)
            return

        positions = "".join(full_positions[positions_limit_step - positions_limit_on_message:positions_limit_step])

        await update_message(call_id, text=f"üìñ<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n{positions}", id_message=state_data.get('id_positions_message'),
                             reply_markup=inline_back_positions if positions_limit_step >= len(full_positions) else inline_next_back_positions)
        await bot.answer_callback_query(call.id)

    elif call_data == 'back_positions':
        if positions_limit_step - positions_limit_on_message >= positions_limit_on_message:
            positions_limit_step -= positions_limit_on_message
            await state.update_data(positions_limit_step)
        else:
            await bot.answer_callback_query(call.id)
            return

        positions = "".join(full_positions[positions_limit_step-positions_limit_on_message:positions_limit_step])

        await update_message(call_id, text=f"üìñ<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n{positions}", id_message=state_data.get('id_positions_message'),
                             reply_markup=inline_next_positions if positions_limit_step <= positions_limit_on_message else inline_next_back_positions)
        await bot.answer_callback_query(call.id)

    # ------------------------------------------------------------------------------
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ô–ö-–ü–†–û–§–ò–¢ –ò –°–¢–û–ü-–õ–û–°–°
    elif call_data == 'change_Lost_Profit':
        await bot.send_message(chat_id=call_id, text='–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å?', reply_markup=inline_mgr_less_profit)

    # ------------------------------------------------------------------------------
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ù–ê–°–¢–†–û–ï–ö
    elif call_data == 'settings_call':
        utils.update_utils()
        await bot.send_message(chat_id=call_id, text=f'‚öôÔ∏è<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>'
                                                     f'\n  üíµ–°—É–º–º–∞ USDT –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π - {db.get_quantity()}$\n'
                                                     f'  üü©–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç - {100 + db.get_takeProfit()}%\n'
                                                     f'  üü•–°—Ç–æ–ø-–ª–æ—Å—Å - {100 - db.get_stopLoss()}%\n'
                                                     f'  üìä–ê–∫—Ç–∏–≤—ã: {utils.wallet_balance[0]}$, –ë–∞–ª–∞–Ω—Å –º–∞—Ä–∂–∏: {utils.wallet_balance[1]}$\n'
                                                     f'  ‚è≥–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ - {utils.expired_date[0]} ({utils.expired_date[1]} days)\n\n'
                                                     f'{db.get_leverage_by_symbol()}', reply_markup=del_kb, parse_mode=ParseMode.HTML)
        await bot.answer_callback_query(call.id)

    # ------------------------------------------------------------------------------
    # –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ó–ê–ü–£–°–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô
    elif call_data in messages_and_states:
        message, state = messages_and_states[call_data]
        await bot.send_message(chat_id=call_id, text=message, reply_markup=cancel)
        await state.set()
        await bot.answer_callback_query(call.id)

    # ------------------------------------------------------------------------------
