import requests

from loader import logging, session
from services.connection_db import db
from config import CHAT_ID_FOR_LOGS, BOT_TOKEN, CHAT_ID_FOR_LOGS_THREAD_ID
from services.trade_help import is_exist_symbol


def send_msg(msg):
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    params = {'chat_id': db.get_user_value('tg_id'), 'text': msg}
    requests.post(url, data=params)

    params = {"message_thread_id": CHAT_ID_FOR_LOGS_THREAD_ID, 'chat_id': f'{CHAT_ID_FOR_LOGS}_{CHAT_ID_FOR_LOGS_THREAD_ID}', 'text': msg}
    requests.post(url, data=params)


def get_info_of_coin(symbol: str) -> dict:
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–µ """
    try:
        return session.get_instruments_info(category="linear", symbol=symbol)
    except Exception as e:
        logging.warning(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')
        return {}


def round_quantity(coin, quantity):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –µ—Å–ª–∏ –º–æ–Ω–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ """
    minOrderQty: str = get_info_of_coin(coin)['result']['list'][0]['lotSizeFilter']['minOrderQty']
    len_min = len(minOrderQty.split('.')[-1]) if '.' in minOrderQty else 0

    qty = round(quantity, len_min)

    if qty != 0:
        return qty

    raise Exception(f'–ú–æ–Ω–µ—Ç–∞ {coin} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: {quantity:.5f)}\n–ú–∏–Ω.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {minOrderQty}')


def do_futures_trade(msg: str):
    coin = msg.split()[0].replace('#', '') + 'USDT'
    if ("buy" in msg.lower() or "short" in msg.lower()) and is_exist_symbol(coin):
        quantity_USDT = db.get_quantity()
        logging.info(f'–ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ futures, –¥–∞–Ω–Ω—ã–µ - {msg}')
        post_order(coin, msg, quantity_USDT)


def get_price_coin(coin: str):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã –≤ —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã"""
    try:
        return session.get_tickers(category="linear", symbol=coin)['result']['list'][0]['markPrice']
    except Exception as e:
        raise Exception(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –º–æ–Ω–µ—Ç—ã {coin}, –æ—à–∏–±–∫–∞: {e}')


def post_order(coin, order: str, quantity_USDT: int | float):
    """ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ long –∏–ª–∏ short """
    try:
        price_coin = float(get_price_coin(coin))
        qty = round_quantity(coin, float(quantity_USDT / price_coin))

        side = "Buy" if "buy" in order.lower() else "Sell" if "short" in order.lower() else "ErrorOrder"
        stopLoss = price_coin * (1 - db.get_stopLoss() / 100)
        takeProfit = price_coin * (1 + db.get_takeProfit() / 100)

        if "short" in order.lower():
            stopLoss, takeProfit = takeProfit, stopLoss
        if 'buy' in order.lower() or "short" in order.lower():
            session.place_order(
                category="linear",
                symbol=coin,
                side=side,
                orderType="Market",
                qty=qty,
                stopLoss=stopLoss,
                takeProfit=takeProfit
            )
            send_msg(f'‚úÖ–£—Å–ø–µ—Ö - {coin}\nüìÑ{qty} –º–æ–Ω–µ—Ç(—ã) –ø–æ —Ü–µ–Ω–µ {price_coin}$\nüü©–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {round(float(takeProfit), 2)}$\nüü•–°—Ç–æ–ø-–ª–æ—Å—Å: {round(float(stopLoss), 2)}$\nüíµ–°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ - {round((qty * price_coin), 2)}$')
    except Exception as e:
        if "ErrCode: 33004" in str(e):  # –æ—à–∏–±–∫–∞ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ API
            err_msg = f'‚ùå–û—à–∏–±–∫–∞ - {order}\n–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ API –∫–ª—é—á–∞'
        elif "ErrCode: 110007" in str(e):  # –æ—à–∏–±–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∫–∏ –¥–µ–Ω–µ–≥
            err_msg = f'‚ùå–û—à–∏–±–∫–∞ - {order}\n–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:\n–ú–æ–Ω–µ—Ç–∞: {order}, —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {quantity_USDT}$'
        else:
            err_msg = f'‚ùå–û—à–∏–±–∫–∞ - {order}\n–û–ø–∏—Å–∞–Ω–∏–µ: {e}\n–°—É–º–º–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {quantity_USDT}$'

        logging.warning(err_msg)
        send_msg(err_msg)



def post_leverage(symbol: str, new_leverage: str | int):
    try:
        symbol = symbol + "USDT" if "USDT" not in symbol else symbol
        new_leverage = str(new_leverage)
        return session.set_leverage(
            category="linear",
            symbol=symbol,
            buyLeverage=new_leverage,
            sellLeverage=new_leverage)
    except Exception as e:
        logging.warning(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')


def test():
    send_msg('tessssssssssssst')

    # post_order('MAV', '#MAV Buy Swing Setup.', 1000)
    # post_order('DOGE', 'Buy Swing Setup.', 1000)
    # price_coin = float(get_price_coin('MAVUSDT'))
    # print('MAVUSDT', round_quantity('ETHUSDT', float(100 / price_coin)))

    # price_coin = float(get_price_coin('ETHUSDT'))
    # print('ETHUSDT', round_quantity('ETHUSDT', float(100 / price_coin)))

    # print(db.open_positions)
    # print(get_info_of_coin('BTCUSDT'))
    pass


if __name__ == "__main__":
    test()
