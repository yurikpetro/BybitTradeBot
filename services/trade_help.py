from loader import session, logging
from datetime import datetime


def get_open_positions():
    try:
        return session.get_positions(category="linear", settleCoin="USDT")
    except Exception as e:
        raise Exception(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –æ—à–∏–±–∫–∞: {e}')


def get_history_transfer(limit_history):
    try:
        return session.get_order_history(category="linear", limit=limit_history)
    except Exception as e:
        raise Exception(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π, –æ—à–∏–±–∫–∞: {e}')


# ---------------------------------------------------------------------------------------
# –î–ï–¢–ê–õ–ò–ó–ò–Ø –î–õ–Ø –ö–û–ù–§–ò–ì–ê
def get_wallet_balance() -> tuple[float, float]:
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è (float, float) -> (–°—É–º–º–∞ –∞–∫—Ç–∏–≤–æ–≤, –ë–∞–ª–∞–Ω—Å –º–∞—Ä–∂–∏) """
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ç—É—Ç - https://testnet.bybit.com/user/assets/home/tradingaccount
    try:
        total_available_balance = session.get_wallet_balance(accountType='UNIFIED')['result']['list'][0]['totalAvailableBalance']  # –æ–±—â–∞—è —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–∞—Ä–∂–∏ –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –≤–∫–ª—é—á–∞—è –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –∏ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L –ø–æ –±–µ—Å—Å—Ä–æ—á–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º.
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–∞—Ä–∂–∏ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π –º–∞—Ä–∂–∏, –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–¥–µ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –∞ –Ω–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º USD –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.
        total_equity = session.get_wallet_balance(accountType='UNIFIED')['result']['list'][0]['totalEquity']  # –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—É—Ç—ë–º —Å–ª–æ–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –≤ –ø–µ—Ä–µ—Å—á—ë—Ç–µ –Ω–∞ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É.
        return round(float(total_equity), 2), round(float(total_available_balance), 2)
    except Exception as err:
        logging.warning(err)
        return 0, 0


def expired_date():
    try:
        expiredAt = session.get_api_key_information()['result']['expiredAt'].replace('Z', '').replace('T', ' ')  # –¥–∞—Ç–∞ –∫–æ–≥–¥–∞ api –Ω–∞–¥–æ –º–µ–Ω—è—Ç—å
        formatted_expiredAt = datetime.strptime(expiredAt, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")

        original_date = datetime.strptime(expiredAt, "%Y-%m-%d %H:%M:%S")
        date_difference = (original_date - datetime.now()).days

        return formatted_expiredAt, date_difference
    except Exception as err:
        logging.warning(err)
        return 0, 0
# ---------------------------------------------------------------------------------------

def is_exist_symbol(symbol: str) -> bool:
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–Ω–µ—Ç–∞ """
    try:
        session.get_instruments_info(category="linear", symbol=symbol)
        return True
    except Exception:
        return False


class TradeHelpers:
    def __init__(self):
        self.limit_history = 40

        self.history = self._get_history()
        self.open_positions = self._get_open_positions()

    def _get_history(self) -> list:
        try:
            history = []
            info = get_history_transfer(self.limit_history)['result']['list']
            for i in info:
                coin = f"#{i['symbol']}"
                price = i['price']
                position = "üü¢Long" if i['side'] == 'Buy' else "üî¥Short"
                stopLoss = f" –°—Ç–æ–ø-–ª–æ—Å—Å: {i['stopLoss']}$, " if i['stopLoss'] != '' else ''
                takeProfit = f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {i['takeProfit']}$," if i['takeProfit'] != '' else ''
                cumExecValue = i['cumExecValue']
                updatedTime = f"–î–∞—Ç–∞: {datetime.fromtimestamp(int(i['updatedTime']) / 1000).strftime('%H:%M %d/%m/%Y')}" if i['updatedTime'] != '' else ''
                orderStatus = "–°—Ç–∞—Ç—É—Å: " + ("‚úÖ" if i['orderStatus'] == 'Filled' else "–°–æ–∑–¥–∞–Ω‚ûï" if i['orderStatus'] == 'Created' else '–û—Ç–º–µ–Ω–µ–Ωüö´' if i['orderStatus'] == 'Cancelled' else i['orderStatus'])
                if i['stopOrderType'] != "":
                    stopOrderType = f'üü©{i["stopOrderType"]}' if i["stopOrderType"] == "TakeProfit" else f'üü•{i["stopOrderType"]}' if i["stopOrderType"] == "StopLoss" else i["stopOrderType"]
                    triggerPrice = i["triggerPrice"]
                    history.append(f"{stopOrderType} –¥–ª—è {coin} –ø–æ —Ü–µ–Ω–µ {triggerPrice}, {updatedTime}")
                else:
                    history.append(f'{position} {coin}, –¶–µ–Ω–∞: {price}$, –û–±—ä–µ–º: {cumExecValue}$,{stopLoss}{takeProfit} {orderStatus} {updatedTime}')
            return history
        except Exception as e:
            logging.warning(e)
            return ["–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞/–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"]

    def _get_open_positions(self) -> list:
        try:
            positions = []
            info = get_open_positions()['result']['list']
            for i in info:
                coin = f"#{i['symbol']}"
                leverage = f"–ú–∞—Ä–∂–∞÷â {i['leverage']}x"
                avgPrice = "–¶–µ–Ω–∞: " + (f"{round(float(i['avgPrice']), 2)}$" if float(i['avgPrice']) > 1 else f"{(float(i['avgPrice']))}$")
                liqPrice = f"–¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {round(float(i['liqPrice']), 2)}$" if i['liqPrice'] != '' else ''
                cumRealisedPnl = f"PnL: {round(float(i['cumRealisedPnl']), 2)}%"
                position = "üü¢Long" if i['side'] == 'Buy' else "üî¥Short"
                stopLoss = f"–°—Ç–æ–ø-–ª–æ—Å—Å: {i['stopLoss']}$" if i['stopLoss'] != '' else ''
                takeProfit = f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {i['takeProfit']}$" if i['takeProfit'] != '' else ''
                positionValue = f"–û–±—ä–µ–º: {round(float(i['positionValue']), 2)}$"

                positions.append(', '.join(
                    filter(None, [f"{position} {coin}", cumRealisedPnl, avgPrice, positionValue, leverage, liqPrice, stopLoss, takeProfit])
                ))
            return positions
        except Exception as e:
            logging.warning(e)
            return ["–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π/–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"]

    def update_history(self):
        self.history = self._get_history()

    def update_open_positions(self):
        self.open_positions = self._get_open_positions()


class Utils:
    def __init__(self):
        self.expired_date = expired_date()
        self.wallet_balance = get_wallet_balance()

    def update_utils(self):
        """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ """
        self.expired_date = expired_date()
        self.wallet_balance = get_wallet_balance()


utils = Utils()
